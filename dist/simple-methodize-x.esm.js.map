{"version":3,"sources":["../src/simple-methodize-x.js"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,eAAjB;AAEA,IAAM,WAAW,GAAG,GAAG,QAAvB;AACA,IAAM,aAAa,GAAG,mCAAtB;AACA,IAAM,QAAQ,GAAG,mBAAjB;;AAEA,IAAM,gBAAgB,GAAG,SAAS,gBAAT,CAA0B,KAA1B,EAAiC;AACxD,MAAI,OAAO,KAAP,KAAiB,UAAjB,IAA+B,IAAI,CAAC,WAAD,EAAc,KAAd,CAAJ,KAA6B,QAAhE,EAA0E;AACxE,UAAM,IAAI,SAAJ,CAAc,aAAa,GAAG,KAA9B,CAAN;AACD;;AAED,SAAO,KAAP;AACD,CAND;;AAQA,IAAM,OAAO,GAAG,SAAS,OAAT,CAAiB,SAAjB,EAA4B,IAA5B,EAAkC;AAChD,MAAM,GAAG,GAAG,SAAS,CAAC,MAAtB;AACA,MAAM,MAAM,GAAG,EAAf;;AAEA,OAAK,IAAI,CAAC,GAAG,IAAI,IAAI,CAArB,EAAwB,CAAC,GAAG,GAA5B,EAAiC,CAAC,IAAI,CAAtC,EAAyC;AACvC,IAAA,MAAM,CAAC,MAAM,CAAC,MAAR,CAAN,GAAwB,SAAS,CAAC,CAAD,CAAjC;AACD;;AAED,SAAO,MAAP;AACD,CATD;AAWA;;;;;;;;;AAOA,IAAM,SAAS,GAAG,SAAS,SAAT,CAAmB,eAAnB,EAAoC;AACpD,EAAA,gBAAgB,CAAC,eAAD,CAAhB;AAEA,SAAO,SAAS,UAAT,GAAsB;AAC3B;AACA,WAAO,IAAI,CAAC,eAAD,EAAkB,SAAS,CAAC,CAAD,CAA3B,EAAgC,OAAO,CAAC,SAAD,EAAY,CAAZ,CAAvC,CAAX;AACD,GAHD;AAID,CAPD;;AASA,eAAe,SAAf","file":"simple-methodize-x.esm.js","sourcesContent":["import call from 'simple-call-x';\n\nconst toStringTag = {}.toString;\nconst ERROR_MESSAGE = 'methodize called on incompatible ';\nconst funcType = '[object Function]';\n\nconst assertIsFunction = function assertIsFunction(value) {\n  if (typeof value !== 'function' && call(toStringTag, value) !== funcType) {\n    throw new TypeError(ERROR_MESSAGE + value);\n  }\n\n  return value;\n};\n\nconst pushAll = function pushAll(arrayLike, from) {\n  const len = arrayLike.length;\n  const target = [];\n\n  for (let i = from || 0; i < len; i += 1) {\n    target[target.length] = arrayLike[i];\n  }\n\n  return target;\n};\n\n/**\n * Methodize a prototype method. Compliant to 8 arguments.\n *\n * @param {Function} prototypeMethod - The prototype method to methodize.\n * @throws {TypeError} If target is not a function.\n * @returns {Function} The static method.\n */\nconst methodize = function methodize(prototypeMethod) {\n  assertIsFunction(prototypeMethod);\n\n  return function methodized() {\n    /* eslint-disable-next-line prefer-rest-params */\n    return call(prototypeMethod, arguments[0], pushAll(arguments, 1));\n  };\n};\n\nexport default methodize;\n"]}
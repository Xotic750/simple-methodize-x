{"version":3,"sources":["../src/simple-methodize-x.js"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,eAAjB;IAEO,I,GAAQ,I,CAAR,I;AACP,IAAM,WAAW,GAAG,IAAI,CAAC,IAAD,EAAO,GAAG,QAAV,CAAxB;AACA,IAAM,aAAa,GAAG,mCAAtB;AACA,IAAM,QAAQ,GAAG,mBAAjB;;AAEA,IAAM,gBAAgB,GAAG,SAAS,gBAAT,CAA0B,KAA1B,EAAiC;AACxD,MAAI,OAAO,KAAP,KAAiB,UAAjB,IAA+B,WAAW,CAAC,KAAD,CAAX,KAAuB,QAA1D,EAAoE;AAClE,UAAM,IAAI,SAAJ,CAAc,aAAa,GAAG,KAA9B,CAAN;AACD;;AAED,SAAO,KAAP;AACD,CAND;AAQA;;;;;;;;;AAOA,IAAM,SAAS,GAAG,SAAS,SAAT,CAAmB,eAAnB,EAAoC;AACpD,SAAO,IAAI,CAAC,IAAD,EAAO,gBAAgB,CAAC,eAAD,CAAvB,CAAX;AACD,CAFD;;AAIA,eAAe,SAAf","file":"simple-methodize-x.esm.js","sourcesContent":["import bind from 'simple-bind-x';\n\nconst {call} = bind;\nconst toStringTag = bind(call, {}.toString);\nconst ERROR_MESSAGE = 'methodize called on incompatible ';\nconst funcType = '[object Function]';\n\nconst assertIsFunction = function assertIsFunction(value) {\n  if (typeof value !== 'function' && toStringTag(value) !== funcType) {\n    throw new TypeError(ERROR_MESSAGE + value);\n  }\n\n  return value;\n};\n\n/**\n * Methodize a prototype method. Compliant to 8 arguments.\n *\n * @param {Function} prototypeMethod - The prototype method to methodize.\n * @throws {TypeError} If target is not a function.\n * @returns {Function} The static method.\n */\nconst methodize = function methodize(prototypeMethod) {\n  return bind(call, assertIsFunction(prototypeMethod));\n};\n\nexport default methodize;\n"]}